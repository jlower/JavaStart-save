package com.learn.www.exercise.oop.overridedemo.demo1;

/**
 * @author lowo
 * 2021/10/6->20:52
 */

//重写都是方法的重写,和属性无关

//方法的重写（override/overwrite）
//1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作
//2.应用：重写以后,当创建子类对象以后,通过子类对象调用子父类中的 同名同参数 的方法时，实际执行的是子类重写父类的方法
//3，重写的规定：
//          方法的声明：  权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{
//                          //方法体
//                      }
//约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法
//①子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同
//②子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符
//    >特殊情况：子类不能重写父类中声明为private权限的方法
//③返回值类型
//>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void
//>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类
    //eg.父类为Object 则 子类重写返回类型可以用Object或Object的子类[String ......]
//>父类被重写的方法的返回值类型是基本数据类型，则子类重写的方法的返回值类型必须是 相同的 基本数据类型
//④子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型

//⑤子类和父类中的同名同参的方法要么都声明为非statc的（考虑重写），要么都声明为static的（不是重写）。

//面试题：区分方法的重载与重写
public class B {
//    public static void test(){
//        System.out.println("B => test()");
//    }
    public void test(){
        System.out.println("B => test()");
    }
}
